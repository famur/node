class Solution {
public:
    vector<string> Permutation(string str) {
        vector<string> res;
        if(str.empty())
        {
            return res;
        }
       Perm(res, str, 0);
        //排序符合输出顺序
       sort(res.begin(), res.end());
       return res;
    }
    void Perm (vector<string> &res, string str, int i)
    {
        //此时交换已到最后一个字符位置
        if(i == str.size() - 1)
        {
            res.push_back(str);
        }
        for(int x = i; x < str.size(); x++)
        {
            if(i != x && str[i] == str[x])//有重复字符时，跳过
                continue;
            //当i!=begin时，先交换，使第begin位取到不同的可能字符，再遍历后面的字符
            swap(str[i], str[x]);
            //遍历其后面的所有字符；
            Perm(res, str, i+1);
            //将begin处的元素重新换回来 减少重复
            swap(str[i], str[x]);
        }
    }
};

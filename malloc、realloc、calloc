一、动态建立数组
代码：

#include<stdio.h>
#include<stdlib.h>

int main()
{
	int n = 10;
	int *p = (int*)malloc(n * sizeof(int));//建立可以存放是个int型数据的数组
	//数组赋值
	for (int i = 0; i<n; i++)
	{
		p[i] = i;
	}
	//数组打印
	for (int i = 0; i<n; i++)
	{
		printf("%d ", p[i]);
	}
	system("pause");
	return 0;
}
函数说明
1、malloc()函数的形参是要分配的字节数，注意是字节数，不是单元数。

2、malloc函数返回的是一个无类型的首地址，因此必须在malloc函数前加上类型强转，转换为自己需要的数据类型。

3、因为malloc函数只负责分配内存，所以我们需要自己定义相应的类型变量来接收malloc分配的内存，注意malloc函数返回的是分配内存的首地址，所以接收的变量也应该是相应的指针类型。

4、在 C 语言中，sizeof() 是一个判断数据类型或者表达式长度的运算符。
注意：动态数组内存是在堆区分配，堆区有2G内存。

二、动态建立数组并初始化
代码:

#include<stdio.h>
#include<stdlib.h>

int main()
{
	int n = 10;
	int *p = (int*)calloc(n, sizeof(int));//建立可以存放是个int型数据的数组
	//数组打印
	for (int i = 0; i<n; i++)
	{
		printf("%d ", p[i]);
	}
	system("pause");
	return 0;
}
示例：

函数说明
1、calloc函数有两个形参，第一个是元素的数目，第二个是每个元素的字节数

2、calloc函数将数组每个元素初始化为0

三、数组扩容
代码：

#include<stdio.h>
#include<stdlib.h>

int main()
{
	int n = 10;
	int *p = (int*)malloc(n * sizeof(int));
	//数组赋值
	for (int i = 0; i<n; i++)
	{
		p[i] = i;
	}
	//数组打印
	for (int i = 0; i<n; i++)
	{
		printf("%d ", p[i]);
	}

	p = (int*)realloc(p, sizeof(int)* 20);
	//数组打印
	for (int i = 0; i<n; i++)
	{
		printf("%d ", p[i]);
	}
	system("pause");
	return 0;
}
示例：

函数说明：
1、realloc函数第一个形参是：对以前指定的指针内存块

2、realloc函数第二个形参是：新的大小 (以字节为单位)。

3、realloc函数返回的也是无类型的地址，因此自己定义相应的类型变量来接收realloc分配的内存

4、realloc函数申请的扩充空间原数据依次覆盖。

注意：
1）如果当前内存段后面有需要的内存空间，则直接扩展这段内存空间，realloc()将返回原指针。

2）如果当前内存段后面的空闲字节不够，那么就使用堆中的第一个能够满足这一要求的内存块，将目前的数据复制到新的位置，并将原来的数据块释放掉，返回新的内存块位置。

3）如果申请失败，将返回NULL，此时，原来的指针仍然有效。

四、空间释放
在堆区分配的内存块中都有一个头标记和尾标记，头标记在内存块首地址向前偏移一点的位置处，尾地址在内存块末尾篇后一点处，所有free崩溃的原因都是因为free函数找不到内存块的头或尾。共有以下几种情况
1、越界
int n = 10;
	int *p = (int*) malloc (n * sizeof(int));//建立可以存放是个int型数据的数组
	//数组赋值
	for(int i=0;i<n;i++)
	{
		p[i] = i;
		p++;
	}
	free(p);
指针变量p没有指向内存块头部，free函数找不到内存块头标记，程序崩溃。
2、重复释放

int *p = (int*) malloc (5 * sizeof(int));//建立可以存放是个int型数据的数组
int *q = p;
	free(p);
	free(q);
p、q指向同一块空间，因此重复释放。

注意：
如果不对在堆区分配的内存进行释放，会导致内存泄漏，内存泄露一般不容易查不容易修改，因此在编程过程中一定注意要释放内存。malloc、realloc、calloc、和free配套使用。

时间限制：C/C++ 1秒，其他语言2秒 空间限制：C/C++ 32M，其他语言64M 热度指数：707017
本题知识点： 二叉树
 算法知识视频讲解
题目描述
输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）


**解题思路**
1.首先需要判断A,B的根节点是否一样。
2.如果不一样，判断A的左孩子和B的根节点是否一样，同理可判断A的右孩子和B的根节点是否一样。依次找下去
如果上述情况都不满足则说明不包含
1.如果找到了A中有值和B中的根节点相同，则比较左右子树是否相同。
2.如果B为空了，则说明包含
3.如果A为空了，则说明不包含
**代码：**
```cpp
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if (pRoot1 == NULL|| pRoot2 == NULL) {
        return false;
        }
 
        return (
        isSubTree(pRoot1, pRoot2) ||
        HasSubtree(pRoot1->left, pRoot2) ||
        HasSubtree(pRoot1->right, pRoot2)
        );
    }
    bool isSubTree(TreeNode* pRoot1, TreeNode* pRoot2) {
    // B树遍历完了，说明B是A的子结构
    if (pRoot2 == NULL) {
        return true;
    }
    // A遍历完了，但是B还没有遍历完，那么B肯定不是A的子结构
    if (pRoot1 == NULL) {
        return false;
    }
 
    if (pRoot1->val != pRoot2->val) {
        return false;
    }
 
    return (
        isSubTree(pRoot1->left, pRoot2->left) &&
        isSubTree(pRoot1->right, pRoot2->right)
    );
    }
};
```

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        /*int ans = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            int sum = 0;
            for(int j = i; j >= 0; j--)
            {
                sum = sum + nums[j];
                if(sum == k)
                {
                    ans++;
                }
            }
        }
        return ans;
        */
        /* 时间复杂度过高 （动规）
        int res = 0;
        vector<int>dp (nums.size());
        dp[0] = nums[0];
        
        for(int i = 1; i < nums.size(); i++)
        {
            dp[i] = dp[i - 1] + nums[i];
        }

        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == k)
            {
                    res++;
            }
            for(int j = i+1; j < nums.size(); j++)
            {
                if((dp[j] - dp[i] + nums[i]) == k)
                {
                    res++;
                }
                
            }
        }
        return res;
        */

        unordered_map<int, int> mp;
        mp[0] = 1;
        int count = 0, pre = 0;
        for (auto& x:nums) {
            pre += x;
            if (mp.find(pre - k) != mp.end()) count += mp[pre - k];
            mp[pre]++;
        }
        return count;
    }
};

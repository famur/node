class Solution {
public:
    // Parameters:
    //        numbers:     an array of integers
    //        length:      the length of array numbers
    //        duplication: (Output) the duplicated number in the array number
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    bool duplicate(int nums[], int length, int* duplication) {
        // 数组中数字进行交换
        /*if(nums == NULL || length == 0){
            return false;
        }
        for(int i = 0; i < length; i++){
            while(nums[i] != i){
                if(nums[i] == nums[nums[i]]){
                    duplication[0] = nums[i];
                    return true;
                }
                swap(nums[i], nums[nums[i]]);
                //int tmp = nums[i];
                //nums[i] = nums[tmp];
                //nums[tmp] = tmp;
            }
        }
        return false;*/
        
        //使用 set 利用 set的特点进行
        /*unordered_set <int> ans;
        for(int i = 0; i < length; i++)
        {
            if(ans.count(nums[i]))
            {
                duplication[0] = nums[i];
                return true;
            }
            else
            {
                ans.insert(nums[i]);
            }
        }
        return false;*/
        
        //对数组进行排序后进行比较
        sort(nums, nums + length);
        for(int i = 0; i < length - 1; i++)
        {
            if(nums[i] == nums[i + 1])
            {
                *duplication = nums[i];
                return true;
            }
            
        }
        return false;
    }
};

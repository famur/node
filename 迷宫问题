1.已知一个线性表（38，25，74，63，52，48），假定采用散列函数h（key) = key%7 计算散列地址，并散
列存储在散列表A【0....6】中，若采用线性探测方法解决冲突，则在该散列表上进行等概率成功查找的平均查
找长度为
		
		依次进行取模运算求出哈希地址：
			1/6*（1+3+1+1+2+4）= 2.0

2.一棵完全二叉树第六层有9个叶结点（根为第一层），则结点个数最多有（）
	这个题目第六层有9个叶结点,问最多有多少个结点,那我们可以想到可以有第7层,但是第7层少了18个结点,
	那么第六层就剩下9个叶子节点所以答案为:1+2+4+8+16+32+64-18=109
	
3.表达式a*(b+c)-d的后缀表达式是()
	先将数字入栈如遇‘+’运算符数字出运算符进如有（则要匹配）出栈
	栈顶元素“（”出栈，“/”出栈,“+”出栈，“（”出栈，括号配对完成。
	
#include<iostream>
#include<vector>
using namespace std;
int N, M; //分别代表行和列
vector<vector<int>> maze;//迷宫矩阵
vector<vector<int>> path_temp;//存储当前路径，第一维表示位置
vector<vector<int>> path_best;//存储最佳路径
void MazeTrack(int i, int j)
{
  maze[i][j] = 1;//表示当前节点已走，不可再走
  path_temp.push_back({ i, j });//将当前节点加入到路径中

  if (i == N - 1 && j == M - 1) //判断是否到达终点
    if (path_best.empty() || path_temp.size() < path_best.size())
      path_best = path_temp;
  if (i - 1 >= 0 && maze[i - 1][j] == 0)//探索向上走是否可行
    MazeTrack(i - 1, j);
  if (i + 1 < N && maze[i + 1][j] == 0)//探索向下走是否可行
    MazeTrack(i + 1, j);
  if (j - 1 >= 0 && maze[i][j - 1] == 0)//探索向左走是否可行
    MazeTrack(i, j - 1);
  if (j + 1 < M && maze[i][j + 1] == 0)//探索向右走是否可行
    MazeTrack(i, j + 1);
  maze[i][j] = 0; //恢复现场，设为未走
  path_temp.pop_back();
}

int main()
{
    while (cin >> N >> M)
  {
      maze = vector<vector<int>>(N, vector<int>(M, 0));
      path_temp.clear();
      path_best.clear();
      for (auto &i : maze)
          for (auto &j : i)
              cin >> j;
      MazeTrack(0, 0);//回溯寻找迷宫最短通路
      for (auto i : path_best)
          cout << '(' << i[0] << ',' << i[1] << ')' << endl;//输出通路
}
    return 0;
}

# 一、什么是继承？
继承机制是面向对象程序设计使代码可以复用的重要的手段，它允许程序员在保持原有类特性的基础上进行扩展，增加功能，这样产生新的类，称派生类。继承呈现了面向对象程序设计的层次结构，体现了由简单到复杂的认知过程。以前我们接触的复用都是函数复用，继承是类设计层次的复用。

# 二、继承定义

代码如下
```cpp
class Person
{
public ;
	void Print()
	{
		cout << "name:" << _name << endl;
		cout << "age:" << _age << endl;
	}
protected:
	string _name = "peter"; //姓名
	int _age = 18; //年龄
};
// 继承后父类的Person的成员函数和成员变量都会变成子类的一部分。
	  派生类    继承方式 基类
class Student : public Person
{
protected:
	int _stuid; //学号
};
int main()
{
	Student s;
	s.Print();
	
	return 0;
}
```
Student 类并未实现Print() 函数而是继承Person类的。



# 四、基类和派生类对象复制转换
1、派生类对象可以赋值给基类的对象 / 基类的指针 / 基类的引用。
2、基类对象不能赋值给派生类对象。
3、基类指针可以通过强制类型转换赋值给派生类的指针。（基类的指针是指向派生类对象时才是安全的）

```cpp
class Person
{
protected:
	string _name; //姓名
	string _hobby; // 性别
	int _age; //年龄
	
};

class Student : public Person
{
public:
	int _grade; //年级
};

void Test()
{
	Student s;
	//1.子类对象可以赋值给父类对象/指针/引用
	Person pe = s;
	Person* p = &s;
	Person& rp = s;
	//2.基类对象不能赋值给派生类对象
	s = pe;
	//3.基类的指针可以通过强制类型转换赋值给派生类的指针
	p = &s;
	Student* ps1 = (Student*) p;
	ps1->_grade = 1;
	
	p = &b;
	Student* ps2 = (Student*)p;//会存在越界访问的问题
	ps2->_grade = 1;
}
```

# 五、继承中的作用域
1、在继承体系中基类和派生类都有独立的作用域。
2、子类和父类中有同名成员，子类成员将屏蔽父类对同名成员的直接访问，这种情况叫隐藏，也叫重定义。
3、需要注意的是如果是成员函数的隐藏，只需要函数名相同就构成隐藏。
4、注意在实际中在继承体系里面最好不要定义同名的成员。

```cpp
class Person
{
protected:
	string _name = "famur";
	int _num = 111;

};

class Student : public Person
{
public:
	void Print()
	{
		cout << "姓名：" << _name << endl;
		cout << "学号：" << _num << endl;
		cout << "身份证号：" << Person::_num << endl;
	}
protected:
	int _num = 222;
};

int main()
{
	Student s;
	s.Print();
	system("pause");
	return 0;
}
```
运行结果：

这里Person中的 _num 被 Student 中的  _num 隐藏。如果想访问Person中的_num需要指明作用域。

# 六、派生类的默认成员函数
1.派生类的构造函数必须调用基类的构造函数初始化基类的那一部分成员。如果基类没有默认的构造函
数，则必须在派生类构造函数的初始化列表阶段显示调用。
2. 派生类的拷贝构造函数必须调用基类的拷贝构造完成基类的拷贝初始化。
3. 派生类的operator=必须要调用基类的operator=完成基类的复制。
4. 派生类的析构函数会在被调用完成后自动调用基类的析构函数清理基类成员。因为这样才能保证派生类
对象先清理派生类成员再清理基类成员的顺序。
5. 派生类对象初始化先调用基类构造再调派生类构造。
6. 派生类对象析构清理先调用派生类析构再调基类的析构。
# 七、继承注意点
1、友元关系不能继承，也就是说基类友元不能访问子类私有和保护成员。
2、基类定义了static静态成员，则整个继承体系里面只有一个这样的成员。无论派生出多少个子类，都只有一个static成员示例。

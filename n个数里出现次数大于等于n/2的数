字符串中找出连续最长的数字串
  遍历字符串，使用cur去记录连续的数字串，如果遇到不是数字字符，则表示一个连续的数字串结束了，则将数字串跟之前的数字串比较，
  如果更长，则更新更长的数字串到res
  
 #include<iosteram>
 #include<sring>
 using namespace std;
 int main()
 {
    string str,res,cur;
    cin>>str;
    for(int i = 0;  i <= str.length(); i++)
    {
        if(str[i] >= '0' &&  str[i] <= '9')
        {
            cur+=str[i];
        }
        else
        {
            if(res.size() < cur.size())
            {
                res = cur;
            }
            else
                cur.clear();
        }
    }
    cout << res << endl;
    return 0;
 }
 
 n个数里出现次数大于等于n/2的数
 更进一步，我们可以在遍历数组的时候保存两个值：一个是candidate，用来保存数组中遍历到的某个数；另一个是nTimes，表示当前数的出现次数，其中nTimes初始化为1。当遍历到数组中下一个数的时候：
如果下一个数与之前candidate保存的数相同，则nTimes加1；
如果下一个数与之前candidate保存的数不同，则nTimes减1；
每次当出现次数nTimes变为0后，用candidate保存下一个数，并把nTimes重新设为1。
直到遍历完数组中的所有数为止。
举个例子，假定数组为{0, 1, 2, 1, 1}，按照上述思路执行的步骤如下。
（1）开始时，candidate保存数0，nTimes初始化为1。
（2）然后遍历到数字1，与数0不同，则nTimes减1变为0。
（3）因为nTimes变为了0，故candidate保存下一个遍历到的数2，且nTimes被重新设为1。
（4）继续遍历到第4个数1，与之前candidate保存的数2不同，故nTimes减1变为0。
（5）因nTimes再次被变为了0，故让candidate保存下一个遍历到的数1，且nTimes被重新设为1。
（6）最后返回的就是最后一次把nTimes设为1的数1。

int FindOneNumber(int* a, int length)
{
         int candidate = a[0];
         int nTimes = 1;
         for (int i = 1; i < length; i++)
         {
                 if (nTimes == 0)
                 {
                         candidate = a[i];
                         nTimes = 1;
                 }
                 else
                 {
                         if (candidate == a[i])
                        {
                                 nTimes++;
                         }
                         else
                         {
                                 nTimes--;
                         }
                 }
         }
         return candidate;

}

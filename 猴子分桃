
#include<iostream>

因为每次分5堆都会多出来1个，所以我们借给猴子们4个，以致每次都可以刚好分成5堆 并且，每次给老猴子的桃
子都不在我们借出的那4个中，这样最后减掉4就可以得到结果。 假设最初由x个桃子，我们借给猴子4个，则此时
有x+4个， 第一个猴子得到（x+4）/5，剩余（x+4）（4/5）个 第二个猴子分完后剩余（x+4） (4/5)^2个 第三个
猴子分完后剩余（x+4） (4/5)^3个 依次类推，第n个猴子分完后剩余（x+4）（4/5）^n 要满足最后剩余的为整
数，并且x最小，则当 x+4=5^n时，满足要求；此时，x=5^n - 4; 老猴子得到的数量为：x+4）*（4/5）^n + n - 4
= 4^n + n - 4 最后的 +n是因为每个小猴子都会多出一个给老猴子，-4是还了借的4个#include<math.h>

using namespace std;

int main()
{
	int n = 0;
	while (cin >> n)
	{
		long a = 0, b = 0;
		if (n == 0)
			break;
		else
		{
			a = pow(5.0, n) - 4; // 5的20次方数值超过int的大小
			b = pow(4.0, n) + n - 4;
		}
		cout << a << " " << b << endl;
	}
	return 0;
}

//直接从arr[len-1]位置判断数奇偶将数字依次放到正确的位置上
class Solution {
public:
	/**
	*  奇数位上都是奇数或者偶数位上都是偶数
	*  输入：数组arr，长度大于2
	*  len：arr的长度
	*  将arr调整成奇数位上都是奇数或者偶数位上都是偶数
	*/
	void oddInOddEvenInEven(vector<int>& arr, int len) {
		size_t i = 0, j = 1;
		while (i<len && j<len)
		{
			if (arr[len - 1] % 2 == 0)
			{
				swap(arr[len - 1], arr[i]);
				i += 2;
			}
			else
			{
				swap(arr[len - 1], arr[j]);
				j += 2;
			}
		}
};

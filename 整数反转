/*
 *整数反转
 *溢出条件有两个，一个是大于整数最大值MAX_VALUE，另一个是小于整数最小值MIN_VALUE，设当前计算结果为ans，下一位为pop。
 *从ans * 10 + pop > MAX_VALUE这个溢出条件来看
 *当出现 ans > MAX_VALUE / 10 且 还有pop需要添加 时，则一定溢出
 *当出现 ans == MAX_VALUE / 10 且 pop > 7 时，则一定溢出，7是2^31 - 1的个位数
 *从ans * 10 + pop < MIN_VALUE这个溢出条件来看
 *当出现 ans < MIN_VALUE / 10 且 还有pop需要添加 时，则一定溢出
 *当出现 ans == MIN_VALUE / 10 且 pop < -8 时，则一定溢出，8是-2^31的个位数
*/
	class Solution {
public:
    int reverse(int x) {
        int rev = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (rev > INT_MAX/10 || (rev == INT_MAX / 10 && pop > 7)) return 0;
            if (rev < INT_MIN/10 || (rev == INT_MIN / 10 && pop < -8)) return 0;
            rev = rev * 10 + pop;
        }
        return rev;
    }
};
	//正数和负数都可以直接反转


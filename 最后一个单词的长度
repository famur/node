/*
	最后一个单词的长度
		从前往后统计非空格字符 p为计数器 遇到空格字符 q保存上一个单词个数 p置为0重新统计下一个单词；
class Solution {
public:
    int lengthOfLastWord(string s) {
        int q = 0;
        int p = 0;
        for(int i = 0; i < s.size(); ++i)
        {
            if(s[i] != ' ')
            {   
                p++;
            }
            if(s[i] == ' ' && p != 0)// 一直为空格则不重置 p
            {
                q = p;
                p = 0;
            }
        }
        if(p == 0)//字符串最后一个为空格
            return q;
        return p;
    }
};
		从字符串末尾开始向前遍历，其中主要有两种情况
第一种情况，以字符串"Hello World"为例，从后向前遍历直到遍历到头或者遇到空格为止，即为最后一个单词"World"的长度5
第二种情况，以字符串"Hello World "为例，需要先将末尾的空格过滤掉，再进行第一种情况的操作，即认为最后一个单词为"World"，长度为5
所以完整过程为先从后过滤掉空格找到单词尾部，再从尾部向前遍历，找到单词头部，最后两者相减，即为单词的长度

	class Solution {
public:
    int lengthOfLastWord(string s) {
        int i = s.size() - 1;
        int q = 0;
        int p = 0;
        while(s[i])
        {
            if(s[i] != ' ')
            {
                p = i+1 ;//下标距离不能表示单词长度
                break;
            }
            --i;
        }
        while(s[i])
        {
            if(s[i] == ' ')
            {
                q = i+1;
                break;
            }
            --i;
        }
        return p - q;
    }
};

*/
